1626793525489:library(shiny); runApp('Example1/app1.R')
1626793541427:runApp('Example1/app1.R')
1626793850214:runApp('Example1/app1.R')
1626794428307:runApp('Example1/app1.R')
1626794601592:runApp('Example1/app1.R')
1626794638779:runApp('Example1/app1.R')
1626794742126:runApp('Example1/app1.R')
1626794959634:runApp('Example1/app1.R')
1626795472604:> install.packages("plotly")
1626795477751:runApp('Example1/app1.R')
1626795680953:runApp('app1.R')
1626795684938:install.packages("plotly")
1626795694313:runApp('Example1/app1.R')
1626795764438:runApp('Example1/app1.R')
1626795768309:runApp('Example1/app1.R')
1626795777263:install.packages("plotly")
1626795802984:runApp('Example1/app1.R')
1626795964017:runApp('Example1/app1.R')
1626796304235:runApp('Example1/app1.R')
1626796789309:runApp('Example1/app1.R')
1626796857464:runApp('Example1/app1.R')
1626796880597:runApp('Example1/app1.R')
1626796914158:runApp('Example1/app1.R')
1626796942521:runApp('Example1/app1.R')
1626797034530:runApp('app1.R')
1626797035381:runApp('Example1/app1.R')
1626797220203:runApp('Example1/app1.R')
1626797296144:runApp('Example1/app1.R')
1626797376340:runApp('Example1/app1.R')
1626797438573:runApp('Example1/app1.R')
1626797488508:runApp('Example1/app1.R')
1626797490029:runApp('Example1/app1.R')
1626797495990:runApp('Example1/app1.R')
1626797575606:runApp('Example1/app1.R')
1626797689818:runApp('Example1/app1.R')
1626797749347:runApp('Example1/app1.R')
1626798164711:runApp('Example1/app1.R')
1626798314197:runApp('Example1/app1.R')
1626799981812:library(shiny); runApp('Example1/app1.R')
1627399723777:library(caret)
1627399789421:# attach the iris dataset to the environment
1627399789422:data(iris)
1627399789431:# rename the dataset
1627399789431:dataset <- iris
1627399862744:# create a list of 80% of the rows in the original dataset we can use for training
1627399862745:validation_index <- createDataPartition(dataset$Species, p=0.80, list=FALSE)
1627399862759:# select 20% of the data for validation
1627399862759:validation <- dataset[-validation_index,]
1627399862761:# use the remaining 80% of data to training and testing the models
1627399862761:dataset <- dataset[validation_index,]
1627400022118:# dimensions of dataset
1627400022119:dim(dataset)
1627400306940:source('~/Machine_Learning_R/machine_learning_R.R')
1627400316735:source('~/Machine_Learning_R/machine_learning_R.R')
1627400323114:source('~/Machine_Learning_R/machine_learning_R.R', echo=TRUE)
1627400388362:source('~/Machine_Learning_R/machine_learning_R.R', echo=TRUE)
1627400403723:source('~/Machine_Learning_R/machine_learning_R.R', echo=TRUE)
1627400431753:source('~/Machine_Learning_R/machine_learning_R.R', echo=TRUE)
1627400451505:source('~/Machine_Learning_R/machine_learning_R.R', echo=TRUE)
1627400582306:source('~/Machine_Learning_R/machine_learning_R.R', echo=TRUE)
1627400592256:source('~/Machine_Learning_R/machine_learning_R.R', echo=TRUE)
1627400650837:source('~/Machine_Learning_R/machine_learning_R.R', echo=TRUE)
1627400697853:source('~/Machine_Learning_R/machine_learning_R.R', echo=TRUE)
1627400725846:source('~/Machine_Learning_R/machine_learning_R.R', echo=TRUE)
1627400836843:source('~/Machine_Learning_R/machine_learning_R.R', echo=TRUE)
1627400880857:source('~/Machine_Learning_R/machine_learning_R.R', echo=TRUE)
1627400904596:source('~/Machine_Learning_R/machine_learning_R.R', echo=TRUE)
1627400926405:source('~/Machine_Learning_R/machine_learning_R.R', echo=TRUE)
1627400946247:source('~/Machine_Learning_R/machine_learning_R.R', echo=TRUE)
1627400994471:library(ellipsis)
1627400998006:source('~/Machine_Learning_R/machine_learning_R.R', echo=TRUE)
1627401019799:detach("package:ellipsis", unload = TRUE)
1627401025418:library(ellipsis)
1627401038605:source('~/Machine_Learning_R/machine_learning_R.R', echo=TRUE)
1627401058033:source('~/Machine_Learning_R/machine_learning_R.R', echo=TRUE)
1627401548443:source('~/Machine_Learning_R/machine_learning_R.R', echo=TRUE)
1627401654499:source('~/Machine_Learning_R/machine_learning_R.R', echo=TRUE)
1627401672798:source('~/Machine_Learning_R/machine_learning_R.R', echo=TRUE)
1627401863733:source('~/Machine_Learning_R/machine_learning_R.R', echo=TRUE)
1627401878716:install.packages("ellipse")
1627401892312:source('~/Machine_Learning_R/machine_learning_R.R', echo=TRUE)
1627401936650:source('~/Machine_Learning_R/machine_learning_R.R', echo=TRUE)
1627401951422:source('~/Machine_Learning_R/machine_learning_R.R', echo=TRUE)
1627402028693:source('~/Machine_Learning_R/machine_learning_R.R', echo=TRUE)
1627402102438:install.packages("ellipse")
1627402153541:source('~/Machine_Learning_R/machine_learning_R.R', echo=TRUE)
1627402155368:install.packages("ellipse")
1627402160497:install.packages("ellipse")
1627402214154:source('~/Machine_Learning_R/machine_learning_R.R', echo=TRUE)
1627402216127:install.packages("ellipse")
1627402221493:install.packages("ellipse")
1627402281759:source('~/Machine_Learning_R/machine_learning_R.R', echo=TRUE)
1627402283938:install.packages("ellipse")
1627402289134:install.packages("ellipse")
1627402311874:source('~/Machine_Learning_R/machine_learning_R.R', echo=TRUE)
1627402381829:install.packages("ellipse")
1627402405382:install.packages("ellipse")
1627402410216:install.packages("ellipse")
1627402419840:source('~/Machine_Learning_R/machine_learning_R.R', echo=TRUE)
1627402425497:install.packages("ellipse")
1627402430423:install.packages("randomForest")
1627402438947:install.packages("e1071")
1627402438949:install.packages("kernlab")
1627402438950:install.packages("ellipse")
1627402446267:install.packages("ellipse")
1627402451316:install.packages("kernlab")
1627402485569:install.packages("e1071")
1627402520059:install.packages("e1071")
1627402531423:source('~/Machine_Learning_R/machine_learning_R.R', echo=TRUE)
1627402637004:source('~/Machine_Learning_R/machine_learning_R.R', echo=TRUE)
1627402646812:install.packages("ellipse")
1627402651883:install.packages("randomForest")
1627402660277:install.packages("e1071")
1627402671975:install.packages("kernlab")
1627402671976:install.packages("ellipse")
1627402685548:install.packages("ellipse")
1627402690745:install.packages("kernlab")
1627402735843:source('~/Machine_Learning_R/machine_learning_R.R', echo=TRUE)
1627402741680:install.packages("ellipse")
1627402787378:source('~/Machine_Learning_R/machine_learning_R.R', echo=TRUE)
1627402793036:install.packages("ellipse")
1627402879086:source('~/Machine_Learning_R/machine_learning_R.R', echo=TRUE)
1627402972377:source('~/Machine_Learning_R/machine_learning_R.R', echo=TRUE)
1627567596787:##Make Predictions
1627567596809:# estimate skill of LDA on the validation dataset
1627567596810:predictions <- predict(fit.lda, validation)
1627567605529:# attach the iris dataset to the environment
1627567605530:data(iris)
1627567613412:library(caret)
1627567617007:# install.packages("ellipse")
1627567617012:# install.packages("kernlab")
1627567617058:# install.packages("e1071")
1627567617066:# install.packages("randomForest")
1627567617074:# attach the iris dataset to the environment
1627567617120:data(iris)
1627567617167:# rename the dataset
1627567617170:dataset <- iris
1627567617195:# create a list of 80% of the rows in the original dataset we can use for training
1627567617217:validation_index <- createDataPartition(dataset$Species, p=0.80, list=FALSE)
1627567617233:# select 20% of the data for validation
1627567617252:validation <- dataset[-validation_index,]
1627567617255:# use the remaining 80% of data to training and testing the models
1627567617263:dataset <- dataset[validation_index,]
1627567617318:# dimensions of dataset
1627567617321:dim(dataset)
1627567617324:# list types for each attribute
1627567617325:sapply(dataset, class)
1627567617376:# take a peek at the first 5 rows of the data
1627567617379:head(dataset)
1627567617387:# list the levels for the class
1627567617388:levels(dataset$Species)
1627567617391:# summarize the class distribution
1627567617401:percentage <- prop.table(table(dataset$Species)) * 100
1627567617404:cbind(freq=table(dataset$Species), percentage=percentage)
1627567617408:# summarize attribute distributions
1627567617409:summary(dataset)
1627567617429:##Univariate Plots (plots of each variable)
1627567617432:# split input and output
1627567617444:x <- dataset[,1:4]
1627567617447:y <- dataset[,5]
1627567617452:##Boxplots
1627567617453:# boxplot for each attribute on one image
1627567617454:par(mfrow=c(1,4))
1627567617474:for(i in 1:4) {
1627567617483:boxplot(x[,i], main=names(iris)[i])
1627567617491:}
1627567617564:##BarPlots
1627567617565:# barplot for class breakdown
1627567617567:plot(y)
1627567617595:#Bar Plot of Iris Flower Species
1627567617598:# install.packages("ellipse")
1627567617601:##Multivariate Plots (interactions between variables)
1627567617602:# scatterplot matrix
1627567617603:featurePlot(x=x, y=y, plot="ellipse")
1627567617922:# box and whisker plots for each attribute
1627567617927:featurePlot(x=x, y=y, plot="box")
1627567618128:# density plots for each attribute by class value
1627567618136:scales <- list(x=list(relation="free"), y=list(relation="free"))
1627567618151:featurePlot(x=x, y=y, plot="density", scales=scales)
1627567618493:##5. Evaluate Some Algorithms
1627567618518:###We will 10-fold crossvalidation to estimate accuracy.
1627567618526:# Run algorithms using 10-fold cross validation
1627567618530:control <- trainControl(method="cv", number=10)
1627567618536:metric <- "Accuracy"
1627567618545:##Letâ€™s evaluate 5 different algorithms:
1627567618561:###Linear Discriminant Analysis (LDA)
1627567618564:###Classification and Regression Trees (CART).
1627567618583:###k-Nearest Neighbors (kNN).
1627567618589:###Support Vector Machines (SVM) with a linear kernel.
1627567618602:###Random Forest (RF)
1627567618627:# a) linear algorithms
1627567618647:set.seed(7)
1627567618653:fit.lda <- train(Species~., data=dataset, method="lda", metric=metric, trControl=control)
1627567619822:# b) nonlinear algorithms
1627567619871:# CART
1627567619918:set.seed(7)
1627567619966:fit.cart <- train(Species~., data=dataset, method="rpart", metric=metric, trControl=control)
1627567620891:# kNN
1627567620892:set.seed(7)
1627567620893:fit.knn <- train(Species~., data=dataset, method="knn", metric=metric, trControl=control)
1627567621921:# c) advanced algorithms
1627567621922:# SVM
1627567621924:set.seed(7)
1627567621925:fit.svm <- train(Species~., data=dataset, method="svmRadial", metric=metric, trControl=control)
1627567625474:# Random Forest
1627567625475:set.seed(7)
1627567625476:fit.rf <- train(Species~., data=dataset, method="rf", metric=metric, trControl=control)
1627567627581:# summarize accuracy of models
1627567627582:results <- resamples(list(lda=fit.lda, cart=fit.cart, knn=fit.knn, svm=fit.svm, rf=fit.rf))
1627567627614:summary(results)
1627567627626:# compare accuracy of models
1627567627627:dotplot(results)
1627567627758:# summarize Best Model
1627567627759:print(fit.lda)
1627567627767:##Make Predictions
1627567627768:# estimate skill of LDA on the validation dataset
1627567627769:predictions <- predict(fit.lda, validation)
1627567627778:confusionMatrix(predictions, validation$Species)
